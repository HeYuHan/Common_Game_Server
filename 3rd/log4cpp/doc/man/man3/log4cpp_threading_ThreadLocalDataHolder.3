.TH "log4cpp::threading::ThreadLocalDataHolder" 3 "1 Nov 2017" "Version 1.1" "log4cpp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4cpp::threading::ThreadLocalDataHolder \- 
.PP
This class holds Thread local data of type T, i.e.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <BoostThreads.hh>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBHolder\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef T \fBdata_type\fP"
.br
.ti -1c
.RI "typedef T \fBdata_type\fP"
.br
.ti -1c
.RI "typedef T \fBdata_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "T * \fBget\fP () const "
.br
.ti -1c
.RI "T * \fBoperator->\fP () const "
.br
.ti -1c
.RI "T & \fBoperator*\fP () const "
.br
.ti -1c
.RI "T * \fBrelease\fP ()"
.br
.ti -1c
.RI "void \fBreset\fP (T *p=NULL)"
.br
.ti -1c
.RI "\fBThreadLocalDataHolder\fP ()"
.br
.ti -1c
.RI "\fB~ThreadLocalDataHolder\fP ()"
.br
.ti -1c
.RI "T * \fBget\fP () const "
.br
.ti -1c
.RI "T * \fBoperator->\fP () const "
.br
.ti -1c
.RI "T & \fBoperator*\fP () const "
.br
.ti -1c
.RI "T * \fBrelease\fP ()"
.br
.ti -1c
.RI "void \fBreset\fP (T *p=NULL)"
.br
.ti -1c
.RI "\fBThreadLocalDataHolder\fP ()"
.br
.ti -1c
.RI "\fB~ThreadLocalDataHolder\fP ()"
.br
.ti -1c
.RI "T * \fBget\fP () const "
.br
.RI "\fIObtains the Object held for the current thread. \fP"
.ti -1c
.RI "T * \fBoperator->\fP () const "
.br
.RI "\fIObtains the Object held for the current thread. \fP"
.ti -1c
.RI "T & \fBoperator*\fP () const "
.br
.RI "\fIObtains the Object held for the current thread. \fP"
.ti -1c
.RI "T * \fBrelease\fP ()"
.br
.RI "\fIReleases the Object held for the current thread. \fP"
.ti -1c
.RI "void \fBreset\fP (T *p=NULL)"
.br
.RI "\fISets a new Object to be held for the current thread. \fP"
.ti -1c
.RI "\fBThreadLocalDataHolder\fP ()"
.br
.ti -1c
.RI "\fB~ThreadLocalDataHolder\fP ()"
.br
.ti -1c
.RI "T * \fBget\fP () const "
.br
.RI "\fIObtains the Object held for the current thread. \fP"
.ti -1c
.RI "T * \fBoperator->\fP () const "
.br
.RI "\fIObtains the Object held for the current thread. \fP"
.ti -1c
.RI "T & \fBoperator*\fP () const "
.br
.RI "\fIObtains the Object held for the current thread. \fP"
.ti -1c
.RI "T * \fBrelease\fP ()"
.br
.RI "\fIReleases the Object held for the current thread. \fP"
.ti -1c
.RI "void \fBreset\fP (T *p=NULL)"
.br
.RI "\fISets a new Object to be held for the current thread. \fP"
.ti -1c
.RI "\fBThreadLocalDataHolder\fP ()"
.br
.ti -1c
.RI "\fB~ThreadLocalDataHolder\fP ()"
.br
.ti -1c
.RI "T * \fBget\fP () const "
.br
.ti -1c
.RI "T * \fBoperator->\fP () const "
.br
.ti -1c
.RI "T & \fBoperator*\fP () const "
.br
.ti -1c
.RI "T * \fBrelease\fP ()"
.br
.ti -1c
.RI "void \fBreset\fP (T *p=NULL)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBfreeHolder\fP (void *p)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T> class log4cpp::threading::ThreadLocalDataHolder< T >"
This class holds Thread local data of type T, i.e. 

for each thread a \fBThreadLocalDataHolder\fP holds 0 or 1 instance of T. The held object must be heap allocated and will be deleted upon termination of the thread to which it belongs.
.PP
for each thread a \fBThreadLocalDataHolder\fP holds 0 or 1 instance of T. The held object must be heap allocated and will be deleted upon termination of the thread to wich it belongs. This is an omni_threads based equivalent of Boost.Threads thread_specific_ptr<T> class. 
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename T > typedef T \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::\fBdata_type\fP"
.SS "template<typename T > typedef T \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::\fBdata_type\fP"
.SS "template<typename T > typedef T \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::\fBdata_type\fP"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T > \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::\fBThreadLocalDataHolder\fP ()\fC [inline]\fP"
.SS "template<typename T > \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::~\fBThreadLocalDataHolder\fP ()\fC [inline]\fP"
.SS "template<typename T > \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::\fBThreadLocalDataHolder\fP ()\fC [inline]\fP"
.SS "template<typename T > \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::~\fBThreadLocalDataHolder\fP ()\fC [inline]\fP"
.SS "template<typename T > \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::\fBThreadLocalDataHolder\fP ()\fC [inline]\fP"
.SS "template<typename T > \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::~\fBThreadLocalDataHolder\fP ()\fC [inline]\fP"
.SS "template<typename T > \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::\fBThreadLocalDataHolder\fP ()\fC [inline]\fP"
.SS "template<typename T > \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::~\fBThreadLocalDataHolder\fP ()\fC [inline]\fP"
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > static void \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::freeHolder (void * p)\fC [inline, static]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::get () const\fC [inline]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::get () const\fC [inline]\fP"
.PP
Obtains the Object held for the current thread. \fBReturns:\fP
.RS 4
a pointer to the held Object or NULL if no Object has been set for the current thread. 
.RE
.PP

.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::get () const\fC [inline]\fP"
.PP
Obtains the Object held for the current thread. \fBReturns:\fP
.RS 4
a pointer to the held Object or NULL if no Object has been set for the current thread. 
.RE
.PP

.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::get () const\fC [inline]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::get () const\fC [inline]\fP"
.SS "template<typename T > T& \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator* () const\fC [inline]\fP"
.SS "template<typename T > T& \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator* () const\fC [inline]\fP"
.PP
Obtains the Object held for the current thread. \fBPrecondition:\fP
.RS 4
\fBget()\fP != NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
a reference to the held Object. 
.RE
.PP

.SS "template<typename T > T& \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator* () const\fC [inline]\fP"
.PP
Obtains the Object held for the current thread. \fBPrecondition:\fP
.RS 4
\fBget()\fP != NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
a reference to the held Object. 
.RE
.PP

.SS "template<typename T > T& \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator* () const\fC [inline]\fP"
.SS "template<typename T > T& \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator* () const\fC [inline]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator-> () const\fC [inline]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator-> () const\fC [inline]\fP"
.PP
Obtains the Object held for the current thread. Initially each thread holds NULL. 
.PP
\fBReturns:\fP
.RS 4
a pointer to the held Object or NULL if no Object has been set for the current thread. 
.RE
.PP

.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator-> () const\fC [inline]\fP"
.PP
Obtains the Object held for the current thread. Initially each thread holds NULL. 
.PP
\fBReturns:\fP
.RS 4
a pointer to the held Object or NULL if no Object has been set for the current thread. 
.RE
.PP

.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator-> () const\fC [inline]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::operator-> () const\fC [inline]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::release ()\fC [inline]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::release ()\fC [inline]\fP"
.PP
Releases the Object held for the current thread. \fBPostcondition:\fP
.RS 4
\fBget()\fP == NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the Object thas was held for the current thread or NULL if no Object was held. 
.RE
.PP

.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::release ()\fC [inline]\fP"
.PP
Releases the Object held for the current thread. \fBPostcondition:\fP
.RS 4
\fBget()\fP == NULL 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the Object thas was held for the current thread or NULL if no Object was held. 
.RE
.PP

.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::release ()\fC [inline]\fP"
.SS "template<typename T > T* \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::release ()\fC [inline]\fP"
.SS "template<typename T > void \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::reset (T * p = \fCNULL\fP)\fC [inline]\fP"
.SS "template<typename T > void \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::reset (T * p = \fCNULL\fP)\fC [inline]\fP"
.PP
Sets a new Object to be held for the current thread. A previously set Object will be deleted. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP the new object to hold. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
\fBget()\fP == p 
.RE
.PP

.SS "template<typename T > void \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::reset (T * p = \fCNULL\fP)\fC [inline]\fP"
.PP
Sets a new Object to be held for the current thread. A previously set Object will be deleted. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP the new object to hold. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
\fBget()\fP == p 
.RE
.PP

.SS "template<typename T > void \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::reset (T * p = \fCNULL\fP)\fC [inline]\fP"
.SS "template<typename T > void \fBlog4cpp::threading::ThreadLocalDataHolder\fP< T >::reset (T * p = \fCNULL\fP)\fC [inline]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for log4cpp from the source code.
