.TH "log4cpp::Category" 3 "1 Nov 2017" "Version 1.1" "log4cpp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4cpp::Category \- 
.PP
This is the central class in the log4j package.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Category.hh>\fP
.PP
Inherited by \fBlog4cpp::FixedContextCategory\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~Category\fP ()"
.br
.RI "\fIDestructor for \fBCategory\fP. \fP"
.ti -1c
.RI "virtual const std::string & \fBgetName\fP () const   throw ()"
.br
.RI "\fIReturn the category name. \fP"
.ti -1c
.RI "virtual void \fBsetPriority\fP (\fBPriority::Value\fP priority)  throw (std::invalid_argument)"
.br
.RI "\fISet the priority of this \fBCategory\fP. \fP"
.ti -1c
.RI "virtual \fBPriority::Value\fP \fBgetPriority\fP () const   throw ()"
.br
.RI "\fIReturns the assigned \fBPriority\fP, if any, for this \fBCategory\fP. \fP"
.ti -1c
.RI "virtual \fBPriority::Value\fP \fBgetChainedPriority\fP () const   throw ()"
.br
.RI "\fIStarting from this \fBCategory\fP, search the category hierarchy for a set priority and return it. \fP"
.ti -1c
.RI "virtual bool \fBisPriorityEnabled\fP (\fBPriority::Value\fP priority) const   throw ()"
.br
.RI "\fIReturns true if the chained priority of the \fBCategory\fP is equal to or higher than given priority. \fP"
.ti -1c
.RI "virtual void \fBaddAppender\fP (\fBAppender\fP *appender)  throw (std::invalid_argument)"
.br
.RI "\fIAdds an \fBAppender\fP to this \fBCategory\fP. \fP"
.ti -1c
.RI "virtual void \fBaddAppender\fP (\fBAppender\fP &appender)"
.br
.RI "\fIAdds an \fBAppender\fP for this \fBCategory\fP. \fP"
.ti -1c
.RI "void \fBsetAppender\fP (\fBAppender\fP *appender)"
.br
.RI "\fIAdds an \fBAppender\fP to this \fBCategory\fP. \fP"
.ti -1c
.RI "void \fBsetAppender\fP (\fBAppender\fP &appender)"
.br
.RI "\fIAdds an \fBAppender\fP for this \fBCategory\fP. \fP"
.ti -1c
.RI "virtual \fBAppender\fP * \fBgetAppender\fP () const "
.br
.RI "\fIReturns the first \fBAppender\fP for this \fBCategory\fP, or NULL if no \fBAppender\fP has been set. \fP"
.ti -1c
.RI "virtual \fBAppender\fP * \fBgetAppender\fP (const std::string &name) const "
.br
.RI "\fIReturns the specified \fBAppender\fP for this \fBCategory\fP, or NULL if the \fBAppender\fP is not attached to this \fBCategory\fP. \fP"
.ti -1c
.RI "virtual \fBAppenderSet\fP \fBgetAllAppenders\fP () const "
.br
.RI "\fIReturns the set of Appenders currently attached to this Catogory. \fP"
.ti -1c
.RI "virtual void \fBremoveAllAppenders\fP ()"
.br
.RI "\fIRemoves all appenders for this \fBCategory\fP. \fP"
.ti -1c
.RI "virtual void \fBremoveAppender\fP (\fBAppender\fP *appender)"
.br
.RI "\fIRemoves specified appender for this \fBCategory\fP. \fP"
.ti -1c
.RI "virtual bool \fBownsAppender\fP () const   throw ()"
.br
.RI "\fIReturns true if the \fBCategory\fP owns the first \fBAppender\fP in its \fBAppender\fP set. \fP"
.ti -1c
.RI "virtual bool \fBownsAppender\fP (\fBAppender\fP *appender) const   throw ()"
.br
.RI "\fIReturns true if the \fBCategory\fP owns the \fBAppender\fP. \fP"
.ti -1c
.RI "virtual void \fBcallAppenders\fP (const \fBLoggingEvent\fP &event)  throw ()"
.br
.RI "\fICall the appenders in the hierarchy starting at \fCthis\fP. \fP"
.ti -1c
.RI "virtual void \fBsetAdditivity\fP (bool additivity)"
.br
.RI "\fISet the additivity flag for this \fBCategory\fP instance. \fP"
.ti -1c
.RI "virtual bool \fBgetAdditivity\fP () const   throw ()"
.br
.RI "\fIReturns the additivity flag for this \fBCategory\fP instance. \fP"
.ti -1c
.RI "virtual \fBCategory\fP * \fBgetParent\fP ()  throw ()"
.br
.RI "\fIReturns the parent category of this category, or NULL if the category is the root category. \fP"
.ti -1c
.RI "virtual const \fBCategory\fP * \fBgetParent\fP () const   throw ()"
.br
.RI "\fIReturns the parent category of this category, or NULL if the category is the root category. \fP"
.ti -1c
.RI "virtual void \fBlog\fP (\fBPriority::Value\fP priority, const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with the specified priority. \fP"
.ti -1c
.RI "virtual void \fBlog\fP (\fBPriority::Value\fP priority, const std::string &message)  throw ()"
.br
.RI "\fILog a message with the specified priority. \fP"
.ti -1c
.RI "virtual void \fBlogva\fP (\fBPriority::Value\fP priority, const char *stringFormat, va_list va)  throw ()"
.br
.RI "\fILog a message with the specified priority. \fP"
.ti -1c
.RI "void \fBdebug\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with debug priority. \fP"
.ti -1c
.RI "void \fBdebug\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with debug priority. \fP"
.ti -1c
.RI "bool \fBisDebugEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority DEBUG. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBdebugStream\fP ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority DEBUG. \fP"
.ti -1c
.RI "void \fBinfo\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with info priority. \fP"
.ti -1c
.RI "void \fBinfo\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with info priority. \fP"
.ti -1c
.RI "bool \fBisInfoEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority INFO. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBinfoStream\fP ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority INFO. \fP"
.ti -1c
.RI "void \fBnotice\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with notice priority. \fP"
.ti -1c
.RI "void \fBnotice\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with notice priority. \fP"
.ti -1c
.RI "bool \fBisNoticeEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority NOTICE. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBnoticeStream\fP ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority NOTICE. \fP"
.ti -1c
.RI "void \fBwarn\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with warn priority. \fP"
.ti -1c
.RI "void \fBwarn\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with warn priority. \fP"
.ti -1c
.RI "bool \fBisWarnEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority WARN. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBwarnStream\fP ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority WARN. \fP"
.ti -1c
.RI "void \fBerror\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with error priority. \fP"
.ti -1c
.RI "void \fBerror\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with error priority. \fP"
.ti -1c
.RI "bool \fBisErrorEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority ERROR. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBerrorStream\fP ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority ERROR. \fP"
.ti -1c
.RI "void \fBcrit\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with crit priority. \fP"
.ti -1c
.RI "void \fBcrit\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with crit priority. \fP"
.ti -1c
.RI "bool \fBisCritEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority CRIT. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBcritStream\fP ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority CRIT. \fP"
.ti -1c
.RI "void \fBalert\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with alert priority. \fP"
.ti -1c
.RI "void \fBalert\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with alert priority. \fP"
.ti -1c
.RI "bool \fBisAlertEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority ALERT. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBalertStream\fP ()  throw ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority ALERT. \fP"
.ti -1c
.RI "void \fBemerg\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with emerg priority. \fP"
.ti -1c
.RI "void \fBemerg\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with emerg priority. \fP"
.ti -1c
.RI "bool \fBisEmergEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority EMERG. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBemergStream\fP ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority EMERG. \fP"
.ti -1c
.RI "void \fBfatal\fP (const char *stringFormat,...)  throw ()"
.br
.RI "\fILog a message with fatal priority. \fP"
.ti -1c
.RI "void \fBfatal\fP (const std::string &message)  throw ()"
.br
.RI "\fILog a message with fatal priority. \fP"
.ti -1c
.RI "bool \fBisFatalEnabled\fP () const   throw ()"
.br
.RI "\fIReturn true if the \fBCategory\fP will log messages with priority FATAL. \fP"
.ti -1c
.RI "\fBCategoryStream\fP \fBfatalStream\fP ()"
.br
.RI "\fIReturn a \fBCategoryStream\fP with priority FATAL. \fP"
.ti -1c
.RI "virtual \fBCategoryStream\fP \fBgetStream\fP (\fBPriority::Value\fP priority)"
.br
.RI "\fIReturn a \fBCategoryStream\fP with given \fBPriority\fP. \fP"
.ti -1c
.RI "virtual \fBCategoryStream\fP \fBoperator<<\fP (\fBPriority::Value\fP priority)"
.br
.RI "\fIReturn a \fBCategoryStream\fP with given \fBPriority\fP. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBCategory\fP & \fBgetRoot\fP ()"
.br
.RI "\fIReturn the root of the \fBCategory\fP hierarchy. \fP"
.ti -1c
.RI "static void \fBsetRootPriority\fP (\fBPriority::Value\fP priority)"
.br
.RI "\fISet the priority of the root \fBCategory\fP. \fP"
.ti -1c
.RI "static \fBPriority::Value\fP \fBgetRootPriority\fP ()  throw ()"
.br
.RI "\fIGet the priority of the \fCroot\fP \fBCategory\fP. \fP"
.ti -1c
.RI "static \fBCategory\fP & \fBgetInstance\fP (const std::string &name)"
.br
.RI "\fIInstantiate a \fBCategory\fP with name \fCname\fP. \fP"
.ti -1c
.RI "static \fBCategory\fP * \fBexists\fP (const std::string &name)"
.br
.RI "\fIIf the named category exists (in the default hierarchy) then it returns a reference to the category, otherwise it returns NULL. \fP"
.ti -1c
.RI "static std::vector< \fBCategory\fP * > * \fBgetCurrentCategories\fP ()"
.br
.RI "\fIReturns all the currently defined categories as a vector of \fBCategory\fP pointers. \fP"
.ti -1c
.RI "static void \fBshutdown\fP ()"
.br
.RI "\fIThis method will remove all Appenders from Categories.XXX. \fP"
.ti -1c
.RI "static void \fBshutdownForced\fP ()"
.br
.RI "\fIThis method will remove all Appenders from Categories.XXX and delete all appenders. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBCategory\fP (const std::string &name, \fBCategory\fP *parent, \fBPriority::Value\fP priority=Priority::NOTSET)"
.br
.RI "\fIConstructor. \fP"
.ti -1c
.RI "virtual void \fB_logUnconditionally\fP (\fBPriority::Value\fP priority, const char *format, va_list arguments)  throw ()"
.br
.ti -1c
.RI "virtual void \fB_logUnconditionally2\fP (\fBPriority::Value\fP priority, const std::string &message)  throw ()"
.br
.RI "\fIUnconditionally log a message with the specified priority. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBHierarchyMaintainer\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is the central class in the log4j package. 

One of the distintive features of log4j (and hence \fBlog4cpp\fP) are hierarchal categories and their evaluation. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "log4cpp::Category::~Category ()\fC [virtual]\fP"
.PP
Destructor for \fBCategory\fP. 
.SS "log4cpp::Category::Category (const std::string & name, \fBCategory\fP * parent, \fBPriority::Value\fP priority = \fCPriority::NOTSET\fP)\fC [protected]\fP"
.PP
Constructor. \fBParameters:\fP
.RS 4
\fIname\fP the fully qualified name of this \fBCategory\fP 
.br
\fIparent\fP the parent of this parent, or NULL for the root \fBCategory\fP 
.br
\fIpriority\fP the priority for this \fBCategory\fP. Defaults to \fBPriority::NOTSET\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void log4cpp::Category::_logUnconditionally (\fBPriority::Value\fP priority, const char * format, va_list arguments)  throw ()\fC [protected, virtual]\fP"
.SS "void log4cpp::Category::_logUnconditionally2 (\fBPriority::Value\fP priority, const std::string & message)  throw ()\fC [protected, virtual]\fP"
.PP
Unconditionally log a message with the specified priority. \fBParameters:\fP
.RS 4
\fIpriority\fP The priority of this log message. 
.br
\fImessage\fP string to write in the log file 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "void log4cpp::Category::addAppender (\fBAppender\fP & appender)\fC [virtual]\fP"
.PP
Adds an \fBAppender\fP for this \fBCategory\fP. This method does not pass ownership from the caller to the \fBCategory\fP. 
.PP
\fBSince:\fP
.RS 4
0.2.7 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIappender\fP The \fBAppender\fP this category has to log to. 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "void log4cpp::Category::addAppender (\fBAppender\fP * appender)  throw (std::invalid_argument)\fC [virtual]\fP"
.PP
Adds an \fBAppender\fP to this \fBCategory\fP. This method passes ownership from the caller to the \fBCategory\fP. 
.PP
\fBSince:\fP
.RS 4
0.2.7 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIappender\fP The \fBAppender\fP to wich this category has to log. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP if the appender is NULL. 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "void log4cpp::Category::alert (const std::string & message)  throw ()"
.PP
Log a message with alert priority. \fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::alert (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with alert priority. \fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::alertStream ()  throw ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority ALERT. \fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SS "void log4cpp::Category::callAppenders (const \fBLoggingEvent\fP & event)  throw ()\fC [virtual]\fP"
.PP
Call the appenders in the hierarchy starting at \fCthis\fP. If no appenders could be found, emit a warning.
.PP
This method always calls all the appenders inherited form the hierracy circumventing any evaluation of whether to log or not to log the particular log request.
.PP
\fBParameters:\fP
.RS 4
\fIevent\fP the LogginEvent to log. 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "void log4cpp::Category::crit (const std::string & message)  throw ()"
.PP
Log a message with crit priority. \fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::crit (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with crit priority. \fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::critStream ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority CRIT. \fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SS "void log4cpp::Category::debug (const std::string & message)  throw ()"
.PP
Log a message with debug priority. \fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::debug (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with debug priority. \fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::debugStream ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority DEBUG. \fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SS "void log4cpp::Category::emerg (const std::string & message)  throw ()"
.PP
Log a message with emerg priority. \fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::emerg (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with emerg priority. \fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::emergStream ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority EMERG. \fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SS "void log4cpp::Category::error (const std::string & message)  throw ()"
.PP
Log a message with error priority. \fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::error (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with error priority. \fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::errorStream ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority ERROR. \fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SS "\fBCategory\fP * log4cpp::Category::exists (const std::string & name)\fC [static]\fP"
.PP
If the named category exists (in the default hierarchy) then it returns a reference to the category, otherwise it returns NULL. \fBSince:\fP
.RS 4
0.2.7 
.RE
.PP

.SS "void log4cpp::Category::fatal (const std::string & message)  throw ()"
.PP
Log a message with fatal priority. NB. priority 'fatal' is equivalent to 'emerg'. 
.PP
\fBSince:\fP
.RS 4
0.2.7 
.RE
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::fatal (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with fatal priority. NB. priority 'fatal' is equivalent to 'emerg'. 
.PP
\fBSince:\fP
.RS 4
0.2.7 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::fatalStream ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority FATAL. NB. priority 'fatal' is equivalent to 'emerg'. 
.PP
\fBSince:\fP
.RS 4
0.2.7 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SS "bool log4cpp::Category::getAdditivity () const  throw ()\fC [virtual]\fP"
.PP
Returns the additivity flag for this \fBCategory\fP instance. 
.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "\fBAppenderSet\fP log4cpp::Category::getAllAppenders () const\fC [virtual]\fP"
.PP
Returns the set of Appenders currently attached to this Catogory. \fBSince:\fP
.RS 4
0.3.1 
.RE
.PP
\fBReturns:\fP
.RS 4
The set of attached Appenders. 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "\fBAppender\fP * log4cpp::Category::getAppender (const std::string & name) const\fC [virtual]\fP"
.PP
Returns the specified \fBAppender\fP for this \fBCategory\fP, or NULL if the \fBAppender\fP is not attached to this \fBCategory\fP. \fBSince:\fP
.RS 4
0.2.7 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBAppender\fP. 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "\fBAppender\fP * log4cpp::Category::getAppender () const\fC [virtual]\fP"
.PP
Returns the first \fBAppender\fP for this \fBCategory\fP, or NULL if no \fBAppender\fP has been set. \fBDeprecated\fP
.RS 4
use getAppender(const std::string&) 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBAppender\fP. 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "\fBPriority::Value\fP log4cpp::Category::getChainedPriority () const  throw ()\fC [virtual]\fP"
.PP
Starting from this \fBCategory\fP, search the category hierarchy for a set priority and return it. Otherwise, return the priority of the root category.
.PP
The \fBCategory\fP class is designed so that this method executes as quickly as possible. 
.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "std::vector< \fBCategory\fP * > * log4cpp::Category::getCurrentCategories ()\fC [static]\fP"
.PP
Returns all the currently defined categories as a vector of \fBCategory\fP pointers. Note: this function does not pass ownership of the categories in the vector to the caller, only the ownership of the vector. However vector<Category&>* is not legal C++, so we can't follow the default ownership conventions.
.PP
Unlike in log4j, the root category \fIis\fP included in the returned set.
.PP
\fBSince:\fP
.RS 4
0.3.2. Before 0.3.2 this method returned a std::set 
.RE
.PP

.SS "\fBCategory\fP & log4cpp::Category::getInstance (const std::string & name)\fC [static]\fP"
.PP
Instantiate a \fBCategory\fP with name \fCname\fP. This method does not set priority of the category which is by default \fC\fBPriority::NOTSET\fP\fP.
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the category to retrieve. 
.RE
.PP

.SS "const std::string & log4cpp::Category::getName () const  throw ()\fC [virtual]\fP"
.PP
Return the category name. \fBReturns:\fP
.RS 4
The category name. 
.RE
.PP

.SS "const \fBCategory\fP * log4cpp::Category::getParent () const  throw ()\fC [virtual]\fP"
.PP
Returns the parent category of this category, or NULL if the category is the root category. \fBReturns:\fP
.RS 4
the parent category. 
.RE
.PP

.SS "\fBCategory\fP * log4cpp::Category::getParent ()  throw ()\fC [virtual]\fP"
.PP
Returns the parent category of this category, or NULL if the category is the root category. \fBReturns:\fP
.RS 4
the parent category. 
.RE
.PP

.SS "\fBPriority::Value\fP log4cpp::Category::getPriority () const  throw ()\fC [virtual]\fP"
.PP
Returns the assigned \fBPriority\fP, if any, for this \fBCategory\fP. \fBReturns:\fP
.RS 4
\fBPriority\fP - the assigned \fBPriority\fP, can be \fBPriority::NOTSET\fP 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "\fBCategory\fP & log4cpp::Category::getRoot ()\fC [static]\fP"
.PP
Return the root of the \fBCategory\fP hierarchy. The root category is always instantiated and available. It's name is the empty string.
.PP
Unlike in log4j, calling \fC\fBCategory.getInstance\fP('')\fP \fIdoes\fP retrieve the root category and not a category just under root named ''. 
.PP
\fBReturns:\fP
.RS 4
The root category 
.RE
.PP

.SS "\fBPriority::Value\fP log4cpp::Category::getRootPriority ()  throw ()\fC [static]\fP"
.PP
Get the priority of the \fCroot\fP \fBCategory\fP. \fBReturns:\fP
.RS 4
the priority of the root category 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::getStream (\fBPriority::Value\fP priority)\fC [virtual]\fP"
.PP
Return a \fBCategoryStream\fP with given \fBPriority\fP. \fBParameters:\fP
.RS 4
\fIpriority\fP The \fBPriority\fP of the \fBCategoryStream\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
The requested \fBCategoryStream\fP. 
.RE
.PP

.SS "void log4cpp::Category::info (const std::string & message)  throw ()"
.PP
Log a message with info priority. \fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::info (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with info priority. \fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::infoStream ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority INFO. \fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SS "bool log4cpp::Category::isAlertEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority ALERT. \fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "bool log4cpp::Category::isCritEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority CRIT. \fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "bool log4cpp::Category::isDebugEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority DEBUG. \fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "bool log4cpp::Category::isEmergEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority EMERG. \fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "bool log4cpp::Category::isErrorEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority ERROR. \fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "bool log4cpp::Category::isFatalEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority FATAL. NB. priority 'fatal' is equivalent to 'emerg'. 
.PP
\fBSince:\fP
.RS 4
0.2.7 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "bool log4cpp::Category::isInfoEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority INFO. \fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "bool log4cpp::Category::isNoticeEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority NOTICE. \fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "bool log4cpp::Category::isPriorityEnabled (\fBPriority::Value\fP priority) const  throw ()\fC [virtual]\fP"
.PP
Returns true if the chained priority of the \fBCategory\fP is equal to or higher than given priority. \fBParameters:\fP
.RS 4
\fIpriority\fP The priority to compare with. 
.RE
.PP
\fBReturns:\fP
.RS 4
whether logging is enable for this priority. 
.RE
.PP

.SS "bool log4cpp::Category::isWarnEnabled () const  throw ()\fC [inline]\fP"
.PP
Return true if the \fBCategory\fP will log messages with priority WARN. \fBReturns:\fP
.RS 4
Whether the \fBCategory\fP will log. 
.RE
.PP

.SS "void log4cpp::Category::log (\fBPriority::Value\fP priority, const std::string & message)  throw ()\fC [virtual]\fP"
.PP
Log a message with the specified priority. \fBParameters:\fP
.RS 4
\fIpriority\fP The priority of this log message. 
.br
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::log (\fBPriority::Value\fP priority, const char * stringFormat,  ...)  throw ()\fC [virtual]\fP"
.PP
Log a message with the specified priority. \fBParameters:\fP
.RS 4
\fIpriority\fP The priority of this log message. 
.br
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "void log4cpp::Category::logva (\fBPriority::Value\fP priority, const char * stringFormat, va_list va)  throw ()\fC [virtual]\fP"
.PP
Log a message with the specified priority. \fBSince:\fP
.RS 4
0.2.7 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpriority\fP The priority of this log message. 
.br
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fIva\fP The arguments for stringFormat. 
.RE
.PP

.SS "void log4cpp::Category::notice (const std::string & message)  throw ()"
.PP
Log a message with notice priority. \fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::notice (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with notice priority. \fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::noticeStream ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority NOTICE. \fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::operator<< (\fBPriority::Value\fP priority)\fC [virtual]\fP"
.PP
Return a \fBCategoryStream\fP with given \fBPriority\fP. \fBParameters:\fP
.RS 4
\fIpriority\fP The \fBPriority\fP of the \fBCategoryStream\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
The requested \fBCategoryStream\fP. 
.RE
.PP

.SS "bool log4cpp::Category::ownsAppender (\fBAppender\fP * appender) const  throw ()\fC [virtual]\fP"
.PP
Returns true if the \fBCategory\fP owns the \fBAppender\fP. In that case the \fBCategory\fP destructor will delete the \fBAppender\fP. 
.PP
\fBSince:\fP
.RS 4
0.2.7 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "virtual bool log4cpp::Category::ownsAppender () const  throw ()\fC [inline, virtual]\fP"
.PP
Returns true if the \fBCategory\fP owns the first \fBAppender\fP in its \fBAppender\fP set. In that case the \fBCategory\fP destructor will delete the \fBAppender\fP. 
.PP
\fBDeprecated\fP
.RS 4
use ownsAppender(Appender*) 
.RE
.PP

.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "void log4cpp::Category::removeAllAppenders ()\fC [virtual]\fP"
.PP
Removes all appenders for this \fBCategory\fP. 
.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "void log4cpp::Category::removeAppender (\fBAppender\fP * appender)\fC [virtual]\fP"
.PP
Removes specified appender for this \fBCategory\fP. \fBSince:\fP
.RS 4
0.2.7 
.RE
.PP

.SS "void log4cpp::Category::setAdditivity (bool additivity)\fC [virtual]\fP"
.PP
Set the additivity flag for this \fBCategory\fP instance. 
.PP
Reimplemented in \fBlog4cpp::FixedContextCategory\fP.
.SS "void log4cpp::Category::setAppender (\fBAppender\fP & appender)\fC [inline]\fP"
.PP
Adds an \fBAppender\fP for this \fBCategory\fP. This method does not pass ownership from the caller to the \fBCategory\fP. 
.PP
\fBDeprecated\fP
.RS 4
use \fBaddAppender(Appender&)\fP instead. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIappender\fP The \fBAppender\fP this category has to log to. 
.RE
.PP

.SS "void log4cpp::Category::setAppender (\fBAppender\fP * appender)\fC [inline]\fP"
.PP
Adds an \fBAppender\fP to this \fBCategory\fP. This method passes ownership from the caller to the \fBCategory\fP. 
.PP
\fBDeprecated\fP
.RS 4
use \fBaddAppender(Appender*)\fP or \fBremoveAllAppenders()\fP instead. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIappender\fP The \fBAppender\fP this category has to log to or NULL to remove the current Appenders. 
.RE
.PP

.SS "void log4cpp::Category::setPriority (\fBPriority::Value\fP priority)  throw (std::invalid_argument)\fC [virtual]\fP"
.PP
Set the priority of this \fBCategory\fP. \fBParameters:\fP
.RS 4
\fIpriority\fP The priority to set. Use \fBPriority::NOTSET\fP to let the category use its parents priority as effective priority. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP if the caller tries to set \fBPriority::NOTSET\fP on the Root \fBCategory\fP. 
.RE
.PP

.SS "void log4cpp::Category::setRootPriority (\fBPriority::Value\fP priority)\fC [static]\fP"
.PP
Set the priority of the root \fBCategory\fP. \fBParameters:\fP
.RS 4
\fIpriority\fP The new priority for the root \fBCategory\fP 
.RE
.PP

.SS "void log4cpp::Category::shutdown ()\fC [static]\fP"
.PP
This method will remove all Appenders from Categories.XXX. 
.SS "void log4cpp::Category::shutdownForced ()\fC [static]\fP"
.PP
This method will remove all Appenders from Categories.XXX and delete all appenders. Releases more memory than \fBshutdown()\fP by deleting appenders. 
.SS "void log4cpp::Category::warn (const std::string & message)  throw ()"
.PP
Log a message with warn priority. \fBParameters:\fP
.RS 4
\fImessage\fP string to write in the log file 
.RE
.PP

.SS "void log4cpp::Category::warn (const char * stringFormat,  ...)  throw ()"
.PP
Log a message with warn priority. \fBParameters:\fP
.RS 4
\fIstringFormat\fP Format specifier for the string to write in the log file. 
.br
\fI...\fP The arguments for stringFormat 
.RE
.PP

.SS "\fBCategoryStream\fP log4cpp::Category::warnStream ()\fC [inline]\fP"
.PP
Return a \fBCategoryStream\fP with priority WARN. \fBReturns:\fP
.RS 4
The \fBCategoryStream\fP. 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBHierarchyMaintainer\fP\fC [friend]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for log4cpp from the source code.
